/*
 * Copyright 2018 Wultra s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'


ext {
    bintrayRepo = "WultraSSLPinning"
    bintrayName = project.GROUP_ID
    libraryName = project.ARTIFACT_ID

    publishedGroupId = project.GROUP_ID
    artifact = project.ARTIFACT_ID
    libraryVersion = project.VERSION_NAME

    libraryDescription = "Android library implementing dynamic SSL pinning"
    siteUrl = "https://github.com/wultra/ssl-pinning-android"
    gitUrl = "https://github.com/wultra/ssl-pinning-android.git"
    developerId = "wultra"
    developerName = "Wultra s.r.o."
    developerEmail = "support@wultra.com"
    licenseName = "Apache License Software License, Version 2.0"
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

group = publishedGroupId
version = libraryVersion

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // Adds javadocs and sources as separate jars.
                artifact androidSourcesJar
                artifact androidJavadocsJar

                groupId = publishedGroupId
                artifactId = artifact
                version = version

                tasks.withType(GenerateModuleMetadata) {
                    enabled = false
                }

                pom {
                    name = libraryName
                    description = libraryDescription
                    url = siteUrl

                    licenses {
                        license {
                            name = licenseName
                            url = licenseUrl
                        }
                    }
                    developers {
                        developer {
                            id = developerId
                            name = developerName
                            email = developerEmail
                        }
                    }
                    scm {
                        connection = gitUrl
                        developerConnection = gitUrl
                        url = siteUrl
                    }
                }
            }
        }
    }
}

task androidJavadocs(type: Javadoc) {
    enabled = false // we have to disable because there are no java sources, only kotlin
    excludes = ['**/*.kt'] // exclude kotlin, Javadoc task can't handle that
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    // adds libraries to classpath
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.getJavaCompileProvider().get().classpath
        }
    }
    options.addStringOption('encoding', 'UTF-8')
}

task androidJavadocsJar(type: Jar, dependsOn: [androidJavadocs, dokka]) {
    archiveClassifier = 'javadoc'
    from androidJavadocs.destinationDir
    from dokka.outputDirectory
}

task androidSourcesJar(type: Jar) {
    archiveClassifier = 'sources'
	from android.sourceSets.main.java.srcDirs
}


// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apiKey")

    publications = ['release']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        userOrg = properties.getProperty("bintray.userOrg")
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        dryRun = false
        publish = true
        publicDownloadNumbers = false
        override = false
        version {
            desc = libraryDescription
            gpg {
                sign = false //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}