/*
 * Copyright 2021 Wultra s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

/*
 * External properties required for proper SDK publishing:
 *
 * Credentials to nexus:
 *   nexus.user              - login / User Token to nexus
 *   nexus.password          - password to nexus
 *   nexus.stagingProfileId  - staging profile ID
 *                             (click on your staging profile and copy ID from browser's URL)
 *
 * Signing options:
 *   signing.gnupg.keyName    - GPG key identifier
 *   signing.gnupg.passphrase - GPG key passphrase
 *
 * If gpg2 executable is not available, then also set
 *   signing.gnupg.executable=gpg
 */

ext {
    // Group, artifact & version
    GROUP_ID = project.GROUP_ID
    ARTIFACT_ID = project.ARTIFACT_ID
    VERSION_NAME = project.VERSION_NAME

    // Nexus credentials
    NEXUS_USERNAME = findProperty('nexus.user')
    NEXUS_PASSWORD = findProperty('nexus.password')
    //NEXUS_STAGING_PROFILE = findProperty('nexus.stagingProfileId')

    // POM content
    POM_LIBRARY_NAME = "Dynamic SSL pinning"
    POM_DESCRIPTION = "Android library implementing dynamic SSL pinning"
    POM_PACKAGING = "aar"
    POM_SITE_URL = "https://github.com/wultra/ssl-pinning-android"
    POM_SCM_CONNECTION_URL = "scm:git:github.com/wultra/ssl-pinning-android.git"
    POM_SCM_URL = "https://github.com/wultra/ssl-pinning-android"
    POM_DEVELOPER_ID =" wultra"
    POM_DEVELOPER_NAME = "Wultra s.r.o."
    POM_DEVELOPER_EMAIL = "support@wultra.com"
    POM_LICENSE_NAME = "Apache License Software License, Version 2.0"
    POM_LICENSE_URL = "https://www.apache.org/licenses/LICENSE-2.0.txt"
}


task androidJavadocs(type: Javadoc) {
    enabled = false // we have to disable because there are no java sources, only kotlin
    excludes = ['**/*.kt'] // exclude kotlin, Javadoc task can't handle that
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    // adds libraries to classpath
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.getJavaCompileProvider().get().classpath
        }
    }
    options.addStringOption('encoding', 'UTF-8')
}

task("androidJavadocsJar", type: Jar, dependsOn: [androidJavadocs, dokkaJavadoc]) {
    archiveClassifier = 'javadoc'
    from androidJavadocs.destinationDir
    from dokkaJavadoc.outputDirectory
}

task androidSourcesJar(type: Jar) {
    archiveClassifier = 'sources'
	from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

publishing {
    publications {
        release(MavenPublication) {
            // POM group, artifact & version
            groupId GROUP_ID
            artifactId = ARTIFACT_ID
            version = VERSION_NAME

            // Include artifacts, the `aar` and the sources
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar
            artifact androidJavadocsJar

            // Define POM
            pom {
                packaging = POM_PACKAGING
                name = POM_LIBRARY_NAME
                description = POM_DESCRIPTION
                url = POM_SITE_URL
                licenses {
                    license {
                        name = POM_LICENSE_NAME
                        url = POM_LICENSE_URL
                    }
                }
                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                        email = POM_DEVELOPER_EMAIL
                    }
                }
                scm {
                    connection = POM_SCM_CONNECTION_URL
                    developerConnection = POM_SCM_CONNECTION_URL
                    url = POM_SCM_URL
                }

                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        if (it.name == 'unspecified') return
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    // The repository to publish to, Sonatype/MavenCentral
    repositories {
        maven {
            name = 'sonatype'

            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseBuild() ? releasesRepoUrl : snapshotsRepoUrl

            credentials {
                username NEXUS_USERNAME
                password NEXUS_PASSWORD
            }
        }
    }
}

signing {
    required { shouldSignArtifacts() }
    if (shouldSignArtifacts()) {
        // This must be also conditional, otherwise developers with no signing capabilities will
        // not be able to publish library to the local maven.
        useGpgCmd()
    }
    sign publishing.publications
}

// Helper functions

def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def shouldSignArtifacts() {
    def keyId = findProperty('signing.gnupg.keyName')
    def keyPass = findProperty('signing.gnupg.passphrase')
    return keyId != null && keyPass != null
}
