/*
 * Copyright 2018 Wultra s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */
apply plugin: 'jacoco'


jacoco {
    toolVersion = rootProject.ext.jacocoVersion
}

/**
 * Create coverage report for unit tests ('src/test' source set).
 */
task unitTestCoverageReport(type: JacocoReport,
        group: 'verification',
        description: 'Creates unit test coverage report (for tests under \'test\' source set).',
        dependsOn: ['testDebugUnitTest']) {

    reports {
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugKotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def debugJavaTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugKotlinTree, debugJavaTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec"
    ])
}

/**
 * Create unified coverage report for unit tests and instrumentated tests ('src/test' and 'src/androidTest' source sets).
 */
task unifiedCoverageReport(type: JacocoReport,
        group: 'verification',
        description: 'Creates unified test coverage report for unit tests (under \'test\' source set)' +
                ' and instrumentation tests (under \'androidTest\' source set).',
        dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport', 'unitTestCoverageReport']) {

    reports {
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugKotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def debugJavaTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugKotlinTree, debugJavaTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "intermediates/jacoco_coverage_dir/debugAndroidTest/connectedDebugAndroidTest/code-coverage/*coverage.ec"
    ])
}

